<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java中的static关键字总结</title>
      <link href="/20190530/Java%E4%B8%AD%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/"/>
      <url>/20190530/Java%E4%B8%AD%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>待更</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java对象及对象引用</title>
      <link href="/20190103/java%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/"/>
      <url>/20190103/java%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>&emsp;&emsp;在Java中有一句比较流行的话，叫做“万物皆对象”，这是Java语言设计之初的理念之一。要理解什么是对象，需要跟类一起结合起来理解。下面这段话引自《Java编程思想》中的一段原话：</p><blockquote><p>按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词。</p></blockquote><p>&emsp;&emsp;从这一句话就可以理解到对象的本质，简而言之，它就是类的实例，比如所有的人统称为“人类”，这里的“人类”就是一个类（物种的一种类型），而具体到每个人，比如张三这个人，它就是对象，就是“人类”的实例。</p><h1 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h1><p>为了方便说明，首先定义一个简单的类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有了这个类之后，我们可以来创建对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person1=<span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>通常把这条语句的动作称之为创建爱你一个对象，其实，这条语句包含四个步骤：</p><ol><li>”=“右边的new Person，是以Person类为模板，在堆空间创建一个Person类对象（简称为Person对象）；</li><li>末尾的()意味着，在创建完类对象后立即调用类Person的构造函数。构造函数肯定是有的，若没显式写出来就会调用系统默认的构造函数；</li><li>”=“左边的Person person1就是创建了一个对象引用，用来指向步骤2中的Person类对象；</li><li>”=“操作符就是将对象引用person1指向Person类对象。</li></ol><p>我们把这条语句拆分为两句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person1;</span><br><span class="line">person1=<span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></p><p>效果完全相同，只不过更加清楚，第一句创建一个名为person1的对象引用，第二句先创建一个Person类对象，然后将对象引用person1指向Person类对象。</p><p>我们仔细研究下第二句，找到刚刚创建的对象叫什么名字？叫”Person“吗？不对，Person只是类名，一个类可以创建无数的对象，那么叫什么呢，找不出来对不对，所以我们需要使用对象引用用来”标记“创建的对象，因此person1用来”标记“这个Person类对象，因此现在我们可以说创建了一个Person类对象，名称为person1，访问这个Peroson类对象时直接访问其对象引用就可以了。<br><strong>记住一句话：对象连名字都没有，怎么访问它，只能靠对象引用</strong><br>再来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person2;</span><br></pre></td></tr></table></figure></p><p>这里创建一个对象引用，名为person2，并没有指向哪个对象，故指向为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person2=person1;</span><br></pre></td></tr></table></figure><p>这里发生了复制行为，复制的不是对象，而是复制了对象引用，现在person2也指向了刚才那个Person类对象了，通过访问person2也可以访问Person类对象了。</p><p>再来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person2=<span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></p><p>显而易见，现在创建了一个Person类对象，名为person2，现在person2指向了一个新的对象了，不再指向person1指向的对象了。<br>再来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person1=person2</span><br></pre></td></tr></table></figure></p><p>此时，person1指向了person2指向的新对象了，那么person1指向的那个旧对象去哪了呢，答案是成为了java回收机制待处理的对象，会被回收掉。<br>由此看来，new Person()应该不合法吧，其实不然，最常见的打印语句 <code>System.out.println(&quot;talk is cheap, show me the code&quot;)</code> 字符串对象”talk is cheap, show me the code“其实就是<code>new String(&quot;talk is cheap, show me the code&quot;)</code>,并没有显式指明其对象引用(即对象名称)，但依旧合法。 </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>一个对象引用只能指向1个或者0个对象；</li><li>一个对象可以被多个对象引用指向；</li><li>对象与其引用的指向关系将维持到对象被回收为止。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> 对象引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令使用小结</title>
      <link href="/20180907/github%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
      <url>/20180907/github%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>以下是平时我使用到的git命令，在此做一个总结，方便查看</p><h2 id="远程仓库相关命令"><a href="#远程仓库相关命令" class="headerlink" title="远程仓库相关命令"></a>远程仓库相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">检出仓库：$ git clone git://github.com/jquery/jquery.git</span><br><span class="line"></span><br><span class="line">查看远程仓库：$ git remote -v</span><br><span class="line"></span><br><span class="line">添加远程仓库：$ git remote add [name] [url]</span><br><span class="line"></span><br><span class="line">删除远程仓库：$ git remote rm [name]</span><br><span class="line"></span><br><span class="line">修改远程仓库：$ git remote set-url –push [name] [newUrl]</span><br><span class="line"></span><br><span class="line">拉取远程仓库：$ git pull [remoteName] [localBranchName]</span><br><span class="line"></span><br><span class="line">推送远程仓库：$ git push [remoteName] [localBranchName]</span><br><span class="line"></span><br><span class="line">*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</span><br><span class="line"></span><br><span class="line">$git push origin test:master         // 提交本地test分支作为远程的master分支</span><br><span class="line"></span><br><span class="line">$git push origin test:test              // 提交本地test分支作为远程的test分支</span><br></pre></td></tr></table></figure><h2 id="分支-branch-操作相关命令"><a href="#分支-branch-操作相关命令" class="headerlink" title="分支(branch)操作相关命令"></a>分支(branch)操作相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">查看本地分支：$ git branch</span><br><span class="line"></span><br><span class="line">查看远程分支：$ git branch -r</span><br><span class="line"></span><br><span class="line">创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支</span><br><span class="line"></span><br><span class="line">切换分支：$ git checkout [name]</span><br><span class="line"></span><br><span class="line">创建新分支并立即切换到新分支：$ git checkout -b [name]</span><br><span class="line"></span><br><span class="line">删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</span><br><span class="line"></span><br><span class="line">合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并</span><br><span class="line"></span><br><span class="line">创建远程分支(本地分支push到远程)：$ git push origin [name]</span><br><span class="line"></span><br><span class="line">删除远程分支：git push origin :heads/[name]&amp;nbsp;或&amp;nbsp; gitpush origin :[name] </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</span><br><span class="line"></span><br><span class="line">$git symbolic-ref HEAD refs/heads/[name]</span><br><span class="line"></span><br><span class="line">$rm .git/index</span><br><span class="line"></span><br><span class="line">$git clean -fdx</span><br></pre></td></tr></table></figure><h2 id="版本-tag-操作相关命令"><a href="#版本-tag-操作相关命令" class="headerlink" title="版本(tag)操作相关命令"></a>版本(tag)操作相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">查看版本：$ git tag</span><br><span class="line"></span><br><span class="line">创建版本：$ git tag [name]</span><br><span class="line"></span><br><span class="line">删除版本：$ git tag -d [name]</span><br><span class="line"></span><br><span class="line">查看远程版本：$ git tag -r</span><br><span class="line"></span><br><span class="line">创建远程版本(本地版本push到远程)：$ git push origin [name]</span><br><span class="line"></span><br><span class="line">删除远程版本：$ git push origin :refs/tags/[name]</span><br><span class="line"></span><br><span class="line">合并远程仓库的tag到本地：$ git pull origin –tags</span><br><span class="line"></span><br><span class="line">上传本地tag到远程仓库：$ git push origin –tags</span><br><span class="line"></span><br><span class="line">创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="/20180904/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
      <url>/20180904/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>一直想拥有一个自己的个人博客，终于，站在巨人的肩膀上，完成了个人博客的搭建，这里就不重复造轮子了，有兴趣的同学，参考<a href="https://zhuanlan.zhihu.com/p/34654952" target="_blank" rel="noopener">这里</a>。</p><p>本着一贯追求极致简约，主题用的是<a href="https://github.com/KevinOfNeu/hexo-theme-xoxo" target="_blank" rel="noopener">xoxo</a>，自己魔改了一下，感觉还可以。</p><p>希望在接下来的日子里，能够坚持写博客的习惯。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
